//the page that pops up when the owner clicks "books" after logging in
package coe528project;
import javax.swing.ImageIcon;
import javax.swing.table.DefaultTableModel;
import javax.swing.JOptionPane;
public class OwnerBookPage extends javax.swing.JFrame {
    public Owner theOwner;
    /**
     * Creates new form OwnerBookPage
     */
    public OwnerBookPage() {
        theOwner = new Owner(); 
        initComponents();
        populateBookTable(); 
        setTitle("Book Store App");  //Sets the title
        ImageIcon icon = new ImageIcon(getClass().getResource("/book.png"));
        setIconImage(icon.getImage());
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ownerBookPageTitle = new javax.swing.JLabel();
        backButton = new javax.swing.JButton();
        logoutButton = new javax.swing.JButton();
        addBookButton = new javax.swing.JButton();
        deleteBookButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jBooksTable = new javax.swing.JTable();
        newBookName = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        newBookPrice = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        ownerBookPageTitle.setText("Books");

        backButton.setText("Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        logoutButton.setText("Logout");
        logoutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutButtonActionPerformed(evt);
            }
        });

        addBookButton.setText("Add book");
        addBookButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBookButtonActionPerformed(evt);
            }
        });

        deleteBookButton.setText("Delete Selected Book");
        deleteBookButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBookButtonActionPerformed(evt);
            }
        });

        jBooksTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {},
            new String [] {
                "Book Title", "Book Price"
            }
        ));
        jBooksTable.addContainerListener(new java.awt.event.ContainerAdapter() {
            public void componentAdded(java.awt.event.ContainerEvent evt) {
                jBooksTableComponentAdded(evt);
            }
        });
        jBooksTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jBooksTableMouseClicked(evt);
            }
        });
        jBooksTable.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                jBooksTableComponentShown(evt);
            }
        });
        jScrollPane2.setViewportView(jBooksTable);

        newBookName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newBookNameActionPerformed(evt);
            }
        });

        jLabel2.setText("New Book Name");

        jLabel1.setText("New Book Price");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(deleteBookButton, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(66, 66, 66)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(newBookName, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2))
                                .addGap(67, 67, 67)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(newBookPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 48, Short.MAX_VALUE)
                                        .addComponent(addBookButton))))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(backButton)
                                .addGap(197, 197, 197)
                                .addComponent(ownerBookPageTitle)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(logoutButton))
                            .addComponent(jScrollPane2))))
                .addGap(70, 70, 70))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(backButton)
                    .addComponent(ownerBookPageTitle)
                    .addComponent(logoutButton))
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(newBookName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(newBookPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addBookButton))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(deleteBookButton)
                .addContainerGap(47, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void addBookButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBookButtonActionPerformed
        // TODO add your handling code here:
        addNewBook(); 
    }//GEN-LAST:event_addBookButtonActionPerformed

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        // TODO add your handling code here:
        new OwnerOptionsPage().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_backButtonActionPerformed

    private void logoutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutButtonActionPerformed
        // TODO add your handling code here:
        theOwner.saveBooksToFile(); 
        new LoginScreen().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_logoutButtonActionPerformed

    private void jBooksTableComponentAdded(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_jBooksTableComponentAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_jBooksTableComponentAdded

    private void jBooksTableComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jBooksTableComponentShown
        // TODO add your handling code here:
    }//GEN-LAST:event_jBooksTableComponentShown

    private void newBookNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newBookNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_newBookNameActionPerformed

    private void deleteBookButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBookButtonActionPerformed
        // TODO add your handling code here:
        deleteSelectedBook();
    }//GEN-LAST:event_deleteBookButtonActionPerformed

    private void jBooksTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBooksTableMouseClicked
    
    }//GEN-LAST:event_jBooksTableMouseClicked
    private void deleteSelectedBook() {
    // Get the selected row in the table
    int selectedRow = jBooksTable.getSelectedRow();
    
    // Check if a row is selected
    if (selectedRow != -1) {
        // Get the book name from the clicked row (assuming it's in column 0)
            String selectedBookName = (String) jBooksTable.getValueAt(selectedRow, 0);

            // Find the book to remove from the Owner.books list
            Book bookToRemove = null;
            for (Book book : Owner.books) {
                if (book.getName().equals(selectedBookName)) {
                    bookToRemove = book;
                    break;
                }
            }

            // If the book is found, remove it from the list
            if (bookToRemove != null) {
                Owner.books.remove(bookToRemove);
                System.out.println("Book removed: " + selectedBookName);

                // Remove the row from the JTable
                DefaultTableModel model = (DefaultTableModel) jBooksTable.getModel();
                model.removeRow(selectedRow);
                theOwner.saveBooksToFile();

                populateBookTable();
            } else {
                System.out.println("Book not found!");
            }
        } else {
            // If no row is selected, show a message
            JOptionPane.showMessageDialog(this, "Please select a book to delete.", "No Book Selected", JOptionPane.WARNING_MESSAGE);
        }
    }
    
    
    private void populateBookTable() {
        theOwner.loadBooksFromFile();
        DefaultTableModel model = (DefaultTableModel) jBooksTable.getModel();
    
        // Debugging: Print out the current list of books
        System.out.println("Books currently in Owner.books:");
        for (Book book : Owner.books) {
            System.out.println(book.getName() + " - $" + book.getPrice());
        }

        // Clear any existing rows in the table
        model.setRowCount(0);

        // Populate the table with books from Owner.books
        for (Book book : Owner.books) {
            Object[] row = { book.getName(), "$" + book.getPrice() };
            model.addRow(row);
        }

        model.fireTableDataChanged(); // Force table refresh
    } 
    
    private void addNewBook() {
        String name = newBookName.getText();  
        String priceText = newBookPrice.getText();  
        // Check if the fields are not empty
        if (name.isEmpty() || priceText.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please provide both book name and price.", "Input Error", JOptionPane.WARNING_MESSAGE);
            return;
        }

        int price;
        try {
            price = Integer.parseInt(priceText);  // Convert price to integer
            if (price < 0) {
                JOptionPane.showMessageDialog(this, "Price cannot be negative.", "Input Error", JOptionPane.WARNING_MESSAGE);
                return;
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Please enter a valid numeric price.", "Input Error", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // Check if the book already exists
        for (Book book : Owner.books) {
            if (book.getName().equalsIgnoreCase(name)) {
                JOptionPane.showMessageDialog(this, "Book already exists.", "Input Error", JOptionPane.WARNING_MESSAGE);
                return;
            }
        }

        // Create new book
        Book newBook = new Book(name, price);
        Owner.books.add(newBook);  // Add book to the list
        System.out.println("New book added: " + name + " - $" + price);

        // Save the updated list of books
        theOwner.saveBooksToFile();

        // Debugging: Print the list of books after adding
        System.out.println("Books currently in Owner.books:");
        for (Book book : Owner.books) {
            System.out.println(book.getName() + " - $" + book.getPrice());
        }

        // Optionally, refresh the table to display the new book
        populateBookTable(); // Make sure this method updates the book display
    }

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(OwnerBookPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(OwnerBookPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(OwnerBookPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(OwnerBookPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new OwnerBookPage().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addBookButton;
    private javax.swing.JButton backButton;
    private javax.swing.JButton deleteBookButton;
    private javax.swing.JTable jBooksTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton logoutButton;
    private javax.swing.JTextField newBookName;
    private javax.swing.JTextField newBookPrice;
    private javax.swing.JLabel ownerBookPageTitle;
    // End of variables declaration//GEN-END:variables
}
