//What a customers sees when they log in
package coe528project;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.DefaultTableCellRenderer;
import java.awt.Component;

public class CustomerBookPage extends javax.swing.JFrame {
    static String username; 
    static int points; 
    static String status; 
    Customer user; 
    Owner theOwner; 
    
    
    /**
     * Creates new form CustomerBookPage
     */
    public CustomerBookPage(String username, int points, String status) {
        initComponents();
        theOwner = new Owner();
        populateCustomerBookTable(); 
        // Set the message on the topMessage label
        String message = String.format("Welcome %s! You have %d points. Your status is %s.", username, points, status);
        topMessage.setText(message);
        this.username = username; 
        this.points = points; 
        this.status = status; 
        user = theOwner.findCustomer(username);
        user.resetTotal();//reset the user's total when this page comes up 
        //VERY IMPORTANT otherwise total from previous purchases pile up!
        
        setTitle("Book Store App");  //Sets the title
        ImageIcon icon = new ImageIcon(getClass().getResource("/book.png"));
        setIconImage(icon.getImage());
         
       
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        owner1 = new coe528project.Owner();
        topMessage = new javax.swing.JLabel();
        redeemPointsBuyButton = new javax.swing.JButton();
        buyButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        customerBookTable = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        topMessage.setFont(new java.awt.Font("Berlin Sans FB", 0, 18)); // NOI18N
        topMessage.setText("Welcome #! you have # points. Your status is #.");

        redeemPointsBuyButton.setText("Redeem Points and Buy");
        redeemPointsBuyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                redeemPointsBuyButtonActionPerformed(evt);
            }
        });

        buyButton.setText("Buy");
        buyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buyButtonActionPerformed(evt);
            }
        });

        customerBookTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {},
            new String [] {
                "Book Title", "Price", "Select"
            }
        ));
        jScrollPane2.setViewportView(customerBookTable);

        jButton1.setText("Logout");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 94, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(topMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 565, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(redeemPointsBuyButton)
                            .addGap(65, 65, 65)
                            .addComponent(buyButton))
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 622, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton1)))
                .addGap(76, 76, 76))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jButton1)
                .addGap(18, 18, 18)
                .addComponent(topMessage)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 276, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(redeemPointsBuyButton)
                    .addComponent(buyButton))
                .addContainerGap(56, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        //saveBooksToFile(); 
        new LoginScreen().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void redeemPointsBuyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_redeemPointsBuyButtonActionPerformed
        if (user == null) {
            JOptionPane.showMessageDialog(this, "Customer not found!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        DefaultTableModel model = (DefaultTableModel) customerBookTable.getModel();
        boolean foundChecked = false;

        for (int row = 0; row < model.getRowCount(); row++) {
            Boolean isChecked = (Boolean) model.getValueAt(row, 2); // Read checkbox value as Boolean

            if (Boolean.TRUE.equals(isChecked)) { // Only process checked books
                foundChecked = true;

                String bookName = model.getValueAt(row, 0).toString();
                String priceText = model.getValueAt(row, 1).toString();

                int bookPrice;
                try {
                    bookPrice = Integer.parseInt(priceText.replaceAll("[^0-9]", ""));
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(this, "Invalid price format: " + priceText, "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                for (Book book : Owner.books) {
                    if (book.getName().equals(bookName) && book.getPrice() == bookPrice) {
                        user.addToCart(book);
                    }
                }
            }
        }

        if (!foundChecked) {
            JOptionPane.showMessageDialog(this, "Please select books to buy by checking the boxes.", "No Selection", JOptionPane.WARNING_MESSAGE);
            return;
        }

        user.redeemAndBuy();
        theOwner.saveBooksToFile();
        theOwner.saveCustomersToFile();
        populateCustomerBookTable();

        PurchaseScreen purchaseScreen = new PurchaseScreen(user);
        purchaseScreen.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_redeemPointsBuyButtonActionPerformed

    private void buyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buyButtonActionPerformed
        if (user == null) {
            JOptionPane.showMessageDialog(this, "Customer not found!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        DefaultTableModel model = (DefaultTableModel) customerBookTable.getModel();
        boolean foundChecked = false;

        for (int row = 0; row < model.getRowCount(); row++) {
            Boolean isChecked = (Boolean) model.getValueAt(row, 2); // Read checkbox value as Boolean

            if (Boolean.TRUE.equals(isChecked)) { // Only process checked books
                foundChecked = true;

                String bookName = model.getValueAt(row, 0).toString();
                String priceText = model.getValueAt(row, 1).toString();

                int bookPrice;
                try {
                    bookPrice = Integer.parseInt(priceText.replaceAll("[^0-9]", ""));
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(this, "Invalid price format: " + priceText, "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                for (Book book : Owner.books) {
                    if (book.getName().equals(bookName) && book.getPrice() == bookPrice) {
                        user.addToCart(book);
                    }
                }
            }
        }

        if (!foundChecked) {
            JOptionPane.showMessageDialog(this, "Please select books to buy by checking the boxes.", "No Selection", JOptionPane.WARNING_MESSAGE);
            return;
        }

        user.buy();
        theOwner.saveBooksToFile();
        theOwner.saveCustomersToFile();
        populateCustomerBookTable();
        
        PurchaseScreen purchaseScreen = new PurchaseScreen(user);
        purchaseScreen.setVisible(true);
        this.dispose();

    }//GEN-LAST:event_buyButtonActionPerformed

    //fill up the table on this page
    private void populateCustomerBookTable() {
        DefaultTableModel model = new DefaultTableModel() {
            @Override
            public Class<?> getColumnClass(int columnIndex) {
                if (columnIndex == 2) { // Checkbox column
                    return Boolean.class;
                }
                return String.class;
            }
        };

        // Set column headers
        model.setColumnIdentifiers(new Object[]{"Book Name", "Price", "Select"});

        theOwner.loadBooksFromFile(); 
        model.setRowCount(0); // Clear existing rows

        // Populate the table with book data
        for (Book book : Owner.books) {
            model.addRow(new Object[]{book.getName(), "$" + book.getPrice(), false}); // Checkbox is initially unchecked
        }

        // Apply the model to the table
        customerBookTable.setModel(model);

        // Ensure the checkbox column is properly set
        customerBookTable.getColumnModel().getColumn(2).setCellEditor(new DefaultCellEditor(new JCheckBox()));
        customerBookTable.getColumnModel().getColumn(2).setCellRenderer(new DefaultTableCellRenderer() {
            @Override
            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                JCheckBox checkbox = new JCheckBox();
                checkbox.setSelected(Boolean.TRUE.equals(value)); // Ensure it's always a Boolean
                return checkbox;
            }
        });
    }

    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CustomerBookPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CustomerBookPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CustomerBookPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CustomerBookPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CustomerBookPage(username, points, status).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buyButton;
    private javax.swing.JTable customerBookTable;
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private coe528project.Owner owner1;
    private javax.swing.JButton redeemPointsBuyButton;
    private javax.swing.JLabel topMessage;
    // End of variables declaration//GEN-END:variables
}
