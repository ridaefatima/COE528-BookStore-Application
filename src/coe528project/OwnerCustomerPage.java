//This is the screen that appears when the owner clicks "customers" after login
package coe528project;
import javax.swing.ImageIcon;
import javax.swing.table.DefaultTableModel;
import javax.swing.JOptionPane;

public class OwnerCustomerPage extends javax.swing.JFrame {
    //need the owner to update everything later
    public Owner theOwner;
    
    /**
     * Creates new form OwnerCustomerPage
     */
    public OwnerCustomerPage() {
        initComponents();
        theOwner = new Owner();
        populateCustomersTable(); 
        setTitle("Book Store App");  //Sets the title
        ImageIcon icon = new ImageIcon(getClass().getResource("/book.png"));
        setIconImage(icon.getImage());
         
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ownerCustomerPageTitle = new javax.swing.JLabel();
        backButton = new javax.swing.JButton();
        logoutButton = new javax.swing.JButton();
        addCustomerButton = new javax.swing.JButton();
        deleteCustomerButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jCustomersTable = new javax.swing.JTable();
        newCustomerName = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        newCustomerPassword = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        ownerCustomerPageTitle.setText("Customers");

        backButton.setText("Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        logoutButton.setText("Logout");
        logoutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutButtonActionPerformed(evt);
            }
        });

        addCustomerButton.setText("Add customer");
        addCustomerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addCustomerButtonActionPerformed(evt);
            }
        });

        deleteCustomerButton.setText("Delete Selected Customer");
        deleteCustomerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteCustomerButtonActionPerformed(evt);
            }
        });

        jCustomersTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {},
            new String [] {
                "Customer Name", "Customer Password", "Customer Points"
            }
        ));
        jCustomersTable.addContainerListener(new java.awt.event.ContainerAdapter() {
            public void componentAdded(java.awt.event.ContainerEvent evt) {
                jCustomersTableComponentAdded(evt);
            }
        });
        jCustomersTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jCustomersTableMouseClicked(evt);
            }
        });
        jCustomersTable.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                jCustomersTableComponentShown(evt);
            }
        });
        jScrollPane2.setViewportView(jCustomersTable);

        newCustomerName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newCustomerNameActionPerformed(evt);
            }
        });

        jLabel2.setText("New Customer Name");

        jLabel1.setText("New Customer Password");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(deleteCustomerButton, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(66, 66, 66)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(newCustomerName, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2))
                                .addGap(67, 67, 67)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(newCustomerPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                                        .addComponent(addCustomerButton))))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(backButton)
                                .addGap(197, 197, 197)
                                .addComponent(ownerCustomerPageTitle)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(logoutButton))
                            .addComponent(jScrollPane2))))
                .addGap(70, 70, 70))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(backButton)
                    .addComponent(ownerCustomerPageTitle)
                    .addComponent(logoutButton))
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(newCustomerName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(newCustomerPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addCustomerButton))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(deleteCustomerButton)
                .addContainerGap(47, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        // TODO add your handling code here:
        new OwnerOptionsPage().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_backButtonActionPerformed

    private void logoutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutButtonActionPerformed
        // TODO add your handling code here:
        //Owner.customers.clear();
        theOwner.saveCustomersToFile();
        new LoginScreen().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_logoutButtonActionPerformed

    private void addCustomerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addCustomerButtonActionPerformed
        // TODO add your handling code here:
        addNewCustomer(); 
    }//GEN-LAST:event_addCustomerButtonActionPerformed

    private void deleteCustomerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteCustomerButtonActionPerformed
        // TODO add your handling code here:
        deleteSelectedCustomer();
    }//GEN-LAST:event_deleteCustomerButtonActionPerformed

    private void jCustomersTableComponentAdded(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_jCustomersTableComponentAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_jCustomersTableComponentAdded

    private void jCustomersTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jCustomersTableMouseClicked

    }//GEN-LAST:event_jCustomersTableMouseClicked

    private void jCustomersTableComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jCustomersTableComponentShown
        // TODO add your handling code here:
    }//GEN-LAST:event_jCustomersTableComponentShown

    private void newCustomerNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newCustomerNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_newCustomerNameActionPerformed
    
    //Do this when the delete button is clicked 
    //If nothing is selected when the button is clicked then throw an error message
    private void deleteSelectedCustomer() {
        // Get the selected row in the table
        int selectedRow = jCustomersTable.getSelectedRow();

        // Check if a row is selected
        if (selectedRow != -1) {
            // Get the customer username from the clicked row (assuming it's in column 0)
            String selectedCustomerUsername = (String) jCustomersTable.getValueAt(selectedRow, 0);

            // Find the customer to remove from the Owner.customers list
            Customer customerToRemove = null;
            for (Customer customer : Owner.customers) {
                if (customer.getUsername().equals(selectedCustomerUsername)) {
                    customerToRemove = customer;
                    break;
                }
            }

            // If the customer is found, remove it from the list
            if (customerToRemove != null) {
                // Remove the customer from the Owner.customers list
                Owner.customers.remove(customerToRemove);
                System.out.println("Customer removed: " + selectedCustomerUsername);

                // Check the current state of Owner.customers after removal
                System.out.println("Customers currently in Owner.customers after removal:");
                for (Customer customer : Owner.customers) {
                    System.out.println(customer.getUsername());
                }

                // Remove the row from the JTable
                DefaultTableModel model = (DefaultTableModel) jCustomersTable.getModel();
                model.removeRow(selectedRow);

                // Save the updated list to the file
                theOwner.saveCustomersToFile();

                // Optionally, refresh the table to reflect changes
                populateCustomersTable(); // Ensure this method repopulates the table with updated data
            } else {
                System.out.println("Customer not found!");
            }
        } else {
            // If no row is selected, show a message
            JOptionPane.showMessageDialog(this, "Please select a customer to delete.", "No Customer Selected", JOptionPane.WARNING_MESSAGE);
        }
    }
    
    //add a new newcustomer using the entered username and password
    private void addNewCustomer() {
        String username = newCustomerName.getText();  
        String password = newCustomerPassword.getText();  

        // Check if the fields are not empty
        if (username.isEmpty() || password.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please provide both username and password.", "Input Error", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // Check if the username already exists
        for (Customer customer : Owner.customers) {
            if (customer.getUsername().equals(username)) {
                JOptionPane.showMessageDialog(this, "Username already exists.", "Input Error", JOptionPane.WARNING_MESSAGE);
                return;
            }
        }

        // Create new customer
        Customer newCustomer = new Customer(username, password); // Assuming Customer constructor takes username and password
        //could ask the owner to do this but og well
        Owner.customers.add(newCustomer);  // Add customer to the list
        System.out.println("New customer added: " + username);

        // Save the updated list of customers
        theOwner.saveCustomersToFile();

        //refresh the table to display the new customer
        populateCustomersTable(); // Make sure this method updates the table
    }

    
    //Put all the info in the table on this page according to what is in the customers list
    private void populateCustomersTable() {
        theOwner.loadCustomersFromFile(); 
        DefaultTableModel model = (DefaultTableModel) jCustomersTable.getModel();
    
        // Debugging: Print out the current list of customers
        System.out.println("Customers currently in Owner.customers:");
        for (Customer customer : Owner.customers) {
            System.out.println(customer.getUsername() +" "+ customer.getPassword());
        }

        // Clear any existing rows in the table
        model.setRowCount(0);

        // Populate the table with customers from Owner.customers
        for (Customer customer : Owner.customers) {
            Object[] row = { customer.getUsername(), customer.getPassword(), customer.getPoints() };
            model.addRow(row);
        }

        model.fireTableDataChanged(); // Force table refresh
    } 
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(OwnerCustomerPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(OwnerCustomerPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(OwnerCustomerPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(OwnerCustomerPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new OwnerCustomerPage().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addCustomerButton;
    private javax.swing.JButton backButton;
    private javax.swing.JButton deleteCustomerButton;
    private javax.swing.JTable jCustomersTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton logoutButton;
    private javax.swing.JTextField newCustomerName;
    private javax.swing.JTextField newCustomerPassword;
    private javax.swing.JLabel ownerCustomerPageTitle;
    // End of variables declaration//GEN-END:variables
}
